"""Python implentation of QuickFind."""

from AlgsSedgewickWayne.BaseComp import BaseComp # Base class is for visualization

class QuickFindUF(BaseComp): # Eager Approach
  """ Quickly find if two components are connected."""

  def __init__(self, N): #     $ = N               i        0 1 2 3 4 5 6 7 8 9
    """Init ID value of each index i, to i: i.e. ID[0:9] = [0 1 2 3 4 5 6 7 8 9]."""
    super(QuickFindUF, self).__init__("QuickFindUF")
    self.ID = range(N) # N array accesses (wo/comprehension)

  def connected(self, p, q): # $ = 1
    """ FIND whether p and q are in the same component."""
    return self.ID[p] == self.ID[q] # 2 array accesses

  def union(self, p, q): #     $ = N
    """ UNION by changing all entries with id[p] to id[q]."""
    pID = self.ID[p] # Change all IDs having value, pID, to...
    qID = self.ID[q] # to qID
    for i, curr_ID in enumerate(self.ID):
      # At most 2N + 2 array accesses; 2N: 1st in for-loop above, 2nd in assignment below
      if curr_ID == pID: # Common mistake many make is to put ID[p] instead of pID
        self.ID[i] = qID

  def _root(self, p):
    """Return root of node p."""
    return self.ID[p]