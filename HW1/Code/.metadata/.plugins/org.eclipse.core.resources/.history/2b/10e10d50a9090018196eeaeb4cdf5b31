#Imports Library to use timing function
import time
#Sets global variables to default variables
startProg = time.time()
timeNaive = 0
timeProg = 0
SumCount = 0
OpCount = 0
N = 0
arr = [-10, -30, 1, 0, 20, 10, 25, 5, 30]
arrN = [] #X axis for inputs
arrNaive = []
arrLog = []

arrSort = arr.sort()

#This algorithm is code copied from:
#http://interactivepython.org/runestone/static/pythonds/SortSearch/TheBinarySearch.html

def ThreeSumBinSearch(data1):
    startNaive = time.time()
    global SumCount
    SumCount = 0
    global OpCount
    OpCount = 0 
    global timeNaive
    global timeProg
    data = data1.sort
    for i in range(0, N-1):
        for j in range(i+1, N-1):
            item = -(data[i] + data [j])
            for k in range(j+1, N-1):
                if binarySearch(data, item): 
                    SumCount = SumCount+1
                    #print(data[i], ", ", data[j],", ", data[k])
    timeNaive = time.time() - startNaive
    print(SumCount, OpCount)
    return SumCount, OpCount, timeNaive


def binarySearch(alist, item): 
    #arr
    #alist = arr.sort()
    first = 0
    last = len(alist)-1
    found = False
    while first<=last and not found:
        midpoint = (first + last)//2
        if alist[midpoint] == item:
            found = True
        else:
            if item < alist[midpoint]:
                last = midpoint-1
            else:
                first = midpoint+1
    return found

#testlist = [0, 1, 2, 8, 13, 17, 19, 32, 42,]
#print(binarySearch(testlist, 3))
#print(binarySearch(testlist, 13))

#ThreeSumBinSearch(arr)
#print(arrNaive, timeNaive, SumCount)

p = arr.sort()
print(p)
if binarySearch(p, 10):
    print("yes")


